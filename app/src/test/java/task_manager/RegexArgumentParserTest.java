/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package task_manager;

import org.testng.annotations.*;

import task_manager.ui.cli.ArgumentParser;
import task_manager.ui.cli.ArgumentParserException;
import task_manager.ui.cli.RegexArgumentParser;

import static org.testng.Assert.*;

import java.util.List;

public class RegexArgumentParserTest {
    ArgumentParser argParser = new RegexArgumentParser();

    @Test
    public void emptyCommand() throws ArgumentParserException {
        assertEquals(argParser.parse("").size(), 0);
        assertEquals(argParser.parse(" ").size(), 0);
        assertEquals(argParser.parse(" \t\n \t").size(), 0);
    }

    @Test
    public void singleArgument() throws ArgumentParserException {
        List<String> args = argParser.parse("test");
        assertEquals(args.size(), 1);
        assertEquals(args.get(0), "test");

        args = argParser.parse(" \t@^!:123?& ");
        assertEquals(args.size(), 1);
        assertEquals(args.get(0), "@^!:123?&");
    }

    @Test
    public void multipleArguments() throws ArgumentParserException {
        List<String> args = argParser.parse("arg1 arg2 arg3");
        assertEquals(args.size(), 3);
        assertEquals(args.get(0), "arg1");
        assertEquals(args.get(1), "arg2");
        assertEquals(args.get(2), "arg3");

        args = argParser.parse(" arg$%@ arg3//32: \t23456 ");
        assertEquals(args.size(), 3);
        assertEquals(args.get(0), "arg$%@");
        assertEquals(args.get(1), "arg3//32:");
        assertEquals(args.get(2), "23456");
    }

    @Test
    public void argumentsInQuotes() throws ArgumentParserException {
        List<String> args = argParser.parse("\"arg1\" \"arg2  \" \"arg3\"");
        assertEquals(args.size(), 3);
        assertEquals(args.get(0), "arg1");
        assertEquals(args.get(1), "arg2  ");
        assertEquals(args.get(2), "arg3");
    }

    @Test
    public void unmatchedQuote() {
        assertThrows(ArgumentParserException.class, () -> {
            argParser.parse("\"arg1 \"arg2  \" \"arg3\"");
        });
    }
}
