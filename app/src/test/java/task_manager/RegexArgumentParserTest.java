/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package task_manager;

import org.testng.annotations.*;

import task_manager.ui.cli.ArgumentParser;
import task_manager.ui.cli.ArgumentParserException;
import task_manager.ui.cli.RegexArgumentParser;
import task_manager.ui.cli.command_parser.ArgumentList;

import static org.testng.Assert.*;

public class RegexArgumentParserTest {
    ArgumentParser argParser = new RegexArgumentParser();

    @Test
    public void testEmptyCommand() throws ArgumentParserException {
        assertEquals(argParser.parse("").commandName, null);
        assertEquals(argParser.parse(" ").commandName, null);
        assertEquals(argParser.parse(" \t\n \t").commandName, null);
    }

    @Test
    public void testSingleArgument() throws ArgumentParserException {
        ArgumentList argList = argParser.parse("test");
        assertEquals(argList.commandName, "test");

        argList = argParser.parse(" \t@^!:123?& ");
        assertEquals(argList.commandName, "@^!:123?&");
    }

    @Test
    public void testMultipleArguments() throws ArgumentParserException {
        ArgumentList argList = argParser.parse("arg1 arg2 arg3");
        assertEquals(argList.commandName, "arg1");
        assertEquals(argList.normalArguments.size(), 2);
        assertEquals(argList.normalArguments.get(0), "arg2");
        assertEquals(argList.normalArguments.get(1), "arg3");
        assertEquals(argList.specialArguments.size(), 0);

        argList = argParser.parse(" arg$%@ arg3//32: \t23456 ");
        assertEquals(argList.commandName, "arg$%@");
        assertEquals(argList.normalArguments.size(), 2);
        assertEquals(argList.normalArguments.get(0), "arg3//32:");
        assertEquals(argList.normalArguments.get(1), "23456");
        assertEquals(argList.specialArguments.size(), 0);
    }

    @Test
    public void testArgumentsInQuotes() throws ArgumentParserException {
        ArgumentList argList = argParser.parse("\"arg1\" \"arg2  \" \"arg3\"");
        assertEquals(argList.commandName, "\"arg1\"");
        assertEquals(argList.normalArguments.size(), 2);
        assertEquals(argList.normalArguments.get(0), "arg2  ");
        assertEquals(argList.normalArguments.get(1), "arg3");
        assertEquals(argList.specialArguments.size(), 0);
    }

    @Test
    public void testUnmatchedQuote() {
        assertThrows(ArgumentParserException.class, () -> {
            argParser.parse("\"arg1 \"arg2  \" \"arg3\"");
        });
    }
}
